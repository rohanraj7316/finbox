// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/v1/trading/broadcast.proto

package broadcast

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BroadcastServiceReadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BroadcastServiceReadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BroadcastServiceReadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BroadcastServiceReadRequestMultiError, or nil if none found.
func (m *BroadcastServiceReadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BroadcastServiceReadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSymbol()) < 4 {
		err := BroadcastServiceReadRequestValidationError{
			field:  "Symbol",
			reason: "value length must be at least 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BroadcastServiceReadRequestMultiError(errors)
	}

	return nil
}

// BroadcastServiceReadRequestMultiError is an error wrapping multiple
// validation errors returned by BroadcastServiceReadRequest.ValidateAll() if
// the designated constraints aren't met.
type BroadcastServiceReadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BroadcastServiceReadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BroadcastServiceReadRequestMultiError) AllErrors() []error { return m }

// BroadcastServiceReadRequestValidationError is the validation error returned
// by BroadcastServiceReadRequest.Validate if the designated constraints
// aren't met.
type BroadcastServiceReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BroadcastServiceReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BroadcastServiceReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BroadcastServiceReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BroadcastServiceReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BroadcastServiceReadRequestValidationError) ErrorName() string {
	return "BroadcastServiceReadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BroadcastServiceReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBroadcastServiceReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BroadcastServiceReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BroadcastServiceReadRequestValidationError{}

// Validate checks the field values on Ticker with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ticker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ticker with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TickerMultiError, or nil if none found.
func (m *Ticker) ValidateAll() error {
	return m.validate(true)
}

func (m *Ticker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Symbol

	// no validation rules for ClosePrice

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return TickerMultiError(errors)
	}

	return nil
}

// TickerMultiError is an error wrapping multiple validation errors returned by
// Ticker.ValidateAll() if the designated constraints aren't met.
type TickerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TickerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TickerMultiError) AllErrors() []error { return m }

// TickerValidationError is the validation error returned by Ticker.Validate if
// the designated constraints aren't met.
type TickerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TickerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TickerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TickerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TickerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TickerValidationError) ErrorName() string { return "TickerValidationError" }

// Error satisfies the builtin error interface
func (e TickerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TickerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TickerValidationError{}

// Validate checks the field values on BroadcastServiceReadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BroadcastServiceReadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BroadcastServiceReadResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BroadcastServiceReadResponseMultiError, or nil if none found.
func (m *BroadcastServiceReadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BroadcastServiceReadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTickers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BroadcastServiceReadResponseValidationError{
						field:  fmt.Sprintf("Tickers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BroadcastServiceReadResponseValidationError{
						field:  fmt.Sprintf("Tickers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BroadcastServiceReadResponseValidationError{
					field:  fmt.Sprintf("Tickers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BroadcastServiceReadResponseMultiError(errors)
	}

	return nil
}

// BroadcastServiceReadResponseMultiError is an error wrapping multiple
// validation errors returned by BroadcastServiceReadResponse.ValidateAll() if
// the designated constraints aren't met.
type BroadcastServiceReadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BroadcastServiceReadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BroadcastServiceReadResponseMultiError) AllErrors() []error { return m }

// BroadcastServiceReadResponseValidationError is the validation error returned
// by BroadcastServiceReadResponse.Validate if the designated constraints
// aren't met.
type BroadcastServiceReadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BroadcastServiceReadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BroadcastServiceReadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BroadcastServiceReadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BroadcastServiceReadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BroadcastServiceReadResponseValidationError) ErrorName() string {
	return "BroadcastServiceReadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BroadcastServiceReadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBroadcastServiceReadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BroadcastServiceReadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BroadcastServiceReadResponseValidationError{}
